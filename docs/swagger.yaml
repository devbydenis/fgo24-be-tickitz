basePath: /
definitions:
  dto.ChangePasswordRequest:
    properties:
      confirm_new_password:
        type: string
      email:
        type: string
      new_password:
        type: string
      otp:
        type: string
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
    type: object
  dto.MoviesRequest:
    properties:
      backdrop_img:
        type: string
      casts:
        items:
          items:
            type: string
          type: array
        type: array
      description:
        type: string
      directors:
        type: string
      duration:
        type: integer
      genres:
        items:
          type: string
        type: array
      id:
        type: integer
      language:
        type: string
      popularity:
        type: number
      poster_img:
        type: string
      rating:
        type: number
      release_date:
        type: string
      status:
        description: '"now playing", "coming soon", "ended"'
        type: string
      title:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
    type: object
  dto.UpdateProfileRequest:
    properties:
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      phone_number:
        type: string
      profile_picture:
        type: string
      username:
        type: string
    type: object
  utils.Response:
    properties:
      errors:
        type: string
      message:
        type: string
      otp:
        type: string
      result: {}
      status:
        type: integer
      success:
        type: boolean
      token:
        type: string
      total:
        type: integer
    type: object
info:
  contact: {}
  description: This is a backend service for tickitz web app
  title: Cinemax API
  version: "1.0"
paths:
  /admin:
    post:
      consumes:
      - application/json
      description: Create a new movie with all relations (genres, casts, directors)
      parameters:
      - description: request create movie
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/dto.MoviesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle create movie with all relations
      tags:
      - admin
  /admin/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie admin by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle delete movie admin
      tags:
      - admin
  /admin/list:
    get:
      consumes:
      - application/json
      description: List all movie admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle list all movie admin
      tags:
      - admin
  /admin/update:
    patch:
      consumes:
      - application/json
      description: Update a movie with all relations (genres, casts, directors)
      parameters:
      - description: request update movie
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/dto.MoviesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle update movie with all relations
      tags:
      - admin
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: request change password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle change password
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Forgot password
      parameters:
      - description: request forgot password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle forgot password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: request login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: request create user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle register user
      tags:
      - auth
  /movies/now-showing:
    get:
      consumes:
      - application/json
      description: Get now showing movies
      parameters:
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Sort by
        in: query
        name: sort_by
        type: string
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get now showing movies with limit, page, sort_by, search
      tags:
      - movies
  /movies/up-coming:
    get:
      consumes:
      - application/json
      description: Get up coming movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get up coming movies
      tags:
      - movies
  /profile:
    get:
      consumes:
      - application/json
      description: Get profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Handle get profile
      tags:
      - profile
    patch:
      consumes:
      - application/json
      description: Update profile
      parameters:
      - description: request update profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Handle update profile
      tags:
      - profile
    post:
      consumes:
      - multipart/form-data
      description: Upload photo
      parameters:
      - description: photo
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Handle upload photo
      tags:
      - profile
securityDefinitions:
  Token:
    description: |-
      Use Bearer token to access protected routes
      Example: Bearer your_token_here
      Make sure to include the word "Bearer" followed by a space before the token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
