basePath: /
definitions:
  dto.ChangePasswordRequest:
    properties:
      confirm_new_password:
        type: string
      email:
        type: string
      new_password:
        type: string
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
    type: object
  dto.VerifyOTP:
    properties:
      otp:
        type: string
    type: object
  utils.Response:
    properties:
      errors:
        type: string
      message:
        type: string
      otp:
        type: string
      result: {}
      success:
        type: boolean
      token:
        type: string
    type: object
info:
  contact: {}
  description: This is a backend service for tickitz web app
  title: fgo24-be-tickitz
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: request change password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Handle change password
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Forgot password
      parameters:
      - description: request forgot password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Handle forgot password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: request login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: request create user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Handle register user
      tags:
      - auth
  /auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify otp
      parameters:
      - description: request verify otp
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyOTP'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Handle verify otp
      tags:
      - auth
securityDefinitions:
  Token:
    description: |-
      Use Bearer token to access protected routes
      Example: Bearer your_token_here
      Make sure to include the word "Bearer" followed by a space before the token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
